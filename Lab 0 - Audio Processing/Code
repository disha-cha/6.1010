"""
6.1010 Spring '23 Lab 0: Audio Processing
"""

import wave
import struct

# No additional imports allowed!


def backwards(sound):
    revSamples = sound["samples"][::-1]

    revSound = sound.copy()

    revSound["samples"] = revSamples

    return revSound


def mix(sound1, sound2, p):
    if sound1["rate"] != sound2["rate"]:
        return

    try:

        s1 = sound1["samples"]
        s2 = sound2["samples"]

        if len(s1) <= len(s2):
            length = s1
        elif len(s1) > len(s2):
            length = s2
        else:
            return

        mixed = []
        for index in range(len(length)):
            s1i = p * s1[index]
            s2i = (1 - p) * s2[index]
            mixed.append(s1i + s2i)

        return {"rate": sound1["rate"], "samples": mixed}
    except:
        l1, l2 = sound1["left"], sound2["left"]
        r1, r2 = sound1["right"], sound2["right"]
        if len(l1) <= len(l2):
            length = l1
        elif len(l1) > len(l2):
            length = l2
        else:
            return

        mixedL = []
        mixedR = []
        for index in range(len(length)):
            l1i = p * l1[index]
            r1i = p * r1[index]
            l2i = (1 - p) * l2[index]
            r2i = (1 - p) * r2[index]
            mixedL.append(l1i + l2i)
            mixedR.append(r1i + r2i)
        return {"rate": sound1["rate"], "left": mixedL, "right": mixedR}

def convolve(sound, kernel):
    """
    Applies a filter to a sound, resulting in a new sound that is longer than
    the original mono sound by the length of the kernel - 1.
    Does not modify inputs.

    Args:
        sound: A mono sound dictionary with two key/value pairs:
            * "rate": an int representing the sampling rate, samples per second
            * "samples": a list of floats containing the sampled values
        kernel: A list of numbers

    Returns:
        A new mono sound dictionary.
    """
    samps = sound["samples"]
    final_sample = [0] * (len(kernel) + len(sound["samples"]) - 1)
    for ind in range(len(samps)):
        for index in range(len(kernel)):
            final_sample[ind + index] += samps[ind] * kernel[index]
    return {"rate": sound["rate"], "samples": final_sample}


def echo(sound, num_echoes, delay, scale):
    """
    Compute a new signal consisting of several scaled-down and delayed versions
    of the input sound. Does not modify input sound.

    Args:
        sound: a dictionary representing the original mono sound
        num_echoes: int, the number of additional copies of the sound to add
        delay: float, the amount of seconds each echo should be delayed
        scale: float, the amount by which each echo's samples should be scaled

    Returns:
        A new mono sound dictionary resulting from applying the echo effect.
    """
    delay_n = round(delay * sound["rate"])
    extend = delay_n * num_echoes
    echoes = [0] * (len(sound["samples"]) + extend)
    for index in range(len(sound["samples"])):
        echoes[index] = sound["samples"][index]
    start = 1
    while start <= num_echoes:
        for ind in range(delay_n * start, delay_n * start + len(sound["samples"])):
            echoes[ind] += sound["samples"][ind - (delay_n * start)] * (scale ** start)
        start += 1
    return {"rate": sound["rate"], "samples": echoes}


def pan(sound):
    left = sound["left"][:]
    right = sound["right"][:]
    N = len(left)
    for index in range(N):
        left[index] *= (1 - index/(N - 1))
        right[index] *= (index/(N-1))
    return {"rate": sound["rate"], "left": left, "right": right}



def remove_vocals(sound):
    left = sound["left"][:]
    right = sound["right"][:]
    removed = []
    for index in range(len(left)):
        removed.append(left[index] - right[index])
    return {"rate": sound["rate"], "samples": removed}

# below are helper functions for converting back-and-forth between WAV files
# and our internal dictionary representation for sounds


def bass_boost_kernel(boost, scale=0):
    """
    Constructs a kernel that acts as a bass-boost filter.

    We start by making a low-pass filter, whose frequency response is given by
    (1/2 + 1/2cos(Omega)) ^ N

    Then we scale that piece up and add a copy of the original signal back in.

    Args:
        boost: an int that controls the frequencies that are boosted (0 will
            boost all frequencies roughly equally, and larger values allow more
            focus on the lowest frequencies in the input sound).
        scale: a float, default value of 0 means no boosting at all, and larger
            values boost the low-frequency content more);

    Returns:
        A list of floats representing a bass boost kernel.
    """
    # make this a fake "sound" so that we can use the convolve function
    base = {"rate": 0, "samples": [0.25, 0.5, 0.25]}
    kernel = {"rate": 0, "samples": [0.25, 0.5, 0.25]}
    for i in range(boost):
        kernel = convolve(kernel, base["samples"])
    kernel = kernel["samples"]

    # at this point, the kernel will be acting as a low-pass filter, so we
    # scale up the values by the given scale, and add in a value in the middle
    # to get a (delayed) copy of the original
    kernel = [i * scale for i in kernel]
    kernel[len(kernel) // 2] += 1

    return kernel


def load_wav(filename, stereo=False):
    """
    Load a file and return a sound dictionary.

    Args:
        filename: string ending in '.wav' representing the sound file
        stereo: bool, by default sound is loaded as mono, if True sound will
            have left and right stereo channels.

    Returns:
        A dictionary representing that sound.
    """
    sound_file = wave.open(filename, "r")
    chan, bd, sr, count, _, _ = sound_file.getparams()

    assert bd == 2, "only 16-bit WAV files are supported"

    out = {"rate": sr}

    left = []
    right = []
    for i in range(count):
        frame = sound_file.readframes(1)
        if chan == 2:
            left.append(struct.unpack("<h", frame[:2])[0])
            right.append(struct.unpack("<h", frame[2:])[0])
        else:
            datum = struct.unpack("<h", frame)[0]
            left.append(datum)
            right.append(datum)

    if stereo:
        out["left"] = [i / (2**15) for i in left]
        out["right"] = [i / (2**15) for i in right]
    else:
        samples = [(ls + rs) / 2 for ls, rs in zip(left, right)]
        out["samples"] = [i / (2**15) for i in samples]

    return out


def write_wav(sound, filename):
    """
    Save sound to filename location in a WAV format.

    Args:
        sound: a mono or stereo sound dictionary
        filename: a string ending in .WAV representing the file location to
            save the sound in
    """
    outfile = wave.open(filename, "w")

    if "samples" in sound:
        # mono file
        outfile.setparams((1, 2, sound["rate"], 0, "NONE", "not compressed"))
        out = [int(max(-1, min(1, v)) * (2**15 - 1)) for v in sound["samples"]]
    else:
        # stereo
        outfile.setparams((2, 2, sound["rate"], 0, "NONE", "not compressed"))
        out = []
        for l_val, r_val in zip(sound["left"], sound["right"]):
            l_val = int(max(-1, min(1, l_val)) * (2**15 - 1))
            r_val = int(max(-1, min(1, r_val)) * (2**15 - 1))
            out.append(l_val)
            out.append(r_val)

    outfile.writeframes(b"".join(struct.pack("<h", frame) for frame in out))
    outfile.close()


if __name__ == "__main__":
    # code in this block will only be run when you explicitly run your script,
    # and not when the tests are being run.  this is a good place to put your
    # code for generating and saving sounds, or any other code you write for
    # testing, etc.

    # here is an example of loading a file (note that this is specified as
    # sounds/hello.wav, rather than just as hello.wav, to account for the
    # sound files being in a different directory than this file)

    mountain = load_wav("sounds/lookout_mountain.wav", True)
    write_wav(remove_vocals(mountain), "noVocalMountain.wav")
    # car = load_wav("sounds/car.wav", True)
    # write_wav(pan(car),"pannedCar.wav")
    # chord = load_wav("sounds/chord.wav", True)
    # chord.wav, with 5 echoes, 0.3 seconds of delay between echoes, and a scaling factor of 0.6
    # write_wav(echo(chord, 5, 0.3, 0.6), "chordEcho.wav")
    # synth = load_wav("sounds/synth.wav", True)
    # water = load_wav("sounds/water.wav", True)
    # iceChilli = load_wav("sounds/ice_and_chilli.wav")
    # write_wav(mix(synth,water,0.3),"mixed.wav")
    # kern = bass_boost_kernel(1000,1.5)
    # write_wav(convolve(iceChilli, kern), "base_boosted_ic.wav")
    #print(backwards(hello))
    #write_wav(backwards(hello), "mystery_reversed.wav")

